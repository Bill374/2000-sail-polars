#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar 13 18:11:07 2021

@author: wmorland

Read NMEA183 GPS messages from serial port
Write NMEA2000 GPS messages to the CAN Bus
"""

import os
import logging
import serial
import sys
import glob
import pynmea2
import io


def start_gps():
    """Start find the bluetooth GPS and link it to a serial port."""
    return


def scan_ports():
    """
    Scan for serial ports.

    We might not end up using this since we know we are on a Raspberry Pi and
    the Bluetooth Garmin GPS is not on a standard USB port.

    Raises
    ------
    EnvironmentError
        Running on an unknown platform.

    Returns
    -------
    ports : list
        List of serial ports

    """
    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal "/dev/tty"
        patterns = ('/dev/tty[A-Za-z]*', '/dev/ttyUSB*')
        ports = [glob.glob(pattern) for pattern in patterns]
        ports = [item for sublist in ports for item in sublist]  # flatten
    elif sys.platform.startswith('darwin'):
        patterns = ('/dev/*serial*', '/dev/ttyUSB*', '/dev/ttyS*')
        ports = [glob.glob(pattern) for pattern in patterns]
        ports = [item for sublist in ports for item in sublist]  # flatten
    else:
        raise EnvironmentError('Unsupported platform')
    return ports


def main():
    logger = logging.getLogger('gps-send')
    logger.info('*** gps-send ***')

    logger.info('Start Bluetooth GPS')
    start_gps()

    with serial.Serial(port='/dev/rfcomm0', baudrate=9600, timeout=1) as ser:
        # NMEA0183 sentences expected
        # GPRMC, GPGGA, GPVTG, GPGSA, GPGSV, PGRMT
        # GPRMC: Position, Velocity and Time
        # GPGGA: Time, Position and Fix
        # GPVTG: Actual track made good and speed over ground
        # GPGSA: GPS DOP and active satalites
        # GPGSV: Number of SVs in view, PRN, elevation, azimuth and SNR
        # PGRMT: ???
        sio = io.TextIOWrapper(io.BufferedRWPair(ser, ser))

        while True:
            try:
                line = sio.readline()
                msg = pynmea2.parse(line)
                print(repr(msg))
            except serial.SerialException as e:
                print('Device error: {}'.format(e))
                break
            except pynmea2.ParseError as e:
                print('Parse error: {}'.format(e))
                continue


if __name__ == '__main__':
    log_dir = os.getenv('RKRPROCESSLOGS')
    log_name = f'{log_dir}/gps-send.log'
    if os.path.exists(log_name):
        os.rename(log_name, f'{log_name}.old')
    logging.basicConfig(filename=log_name, filemode='w', level=logging.INFO)
    main()
    logging.shutdown()
